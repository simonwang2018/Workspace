位运算符是把数字看作二制数来进行计算的，因此，需要先将要执行运算的数据转换为二进制，然后才能进行执行运算。python中的位运算符有位与（&）、
位或（|）、位异或（^）、取反（~）、左移位（<<）和右移位（>>）运算符。

1、“位与”运算的运算符为“&”，“位与”运算的运算法则是：两个操作数据的二进制表示，只有对应数位都是1时，结果数位才是1，否则为0.如果两个操作数的
精度不同，则结果的精度与精度高的操作数相同，如下所示：
                    0000 0000 0000 1100
                  & 0000 0000 0000 1000
                 ——————————————————————————
                    0000 0000 0000 1000

2、“位或”运算的运算符为“|”，“位或”运算的运算法则是：两个操作数据的二进制表示，只有对应数位都是0，结果数位才是0，否则为1.如果两个操作数
的精度不同，则结果的精度与精度高的操作数相同，如下所示：
                   0000 0000 0000 0100
                 | 0000 0000 0000 1000
                ————————————————————————————
                   0000 0000 0000 1100

3、“位异或”运算的运算符是“^”,"位异或"运算的运算法则是：当两个操作数的二进制表示相同（同时为0或同时为1）时，结果为0，否则为1.若两个操作
数的精度不同，则结果数的精度与精度高的操作数相同，如下所示：
                   0000 0000 0001 1111
                 ^ 0000 0000 0001 0110
                ————————————————————————————
                   0000 0000 0000 1001

4、“位取反”运算也称“位非”运算，运算符为“~”。“位取反”运算就是将操作数中对应的二进制数1修改为0，0修改为1，如下所示：
                 ~ 0000 0000 0111 1011
              ___________________________
                   1111 1111 1000 0100
在python中使用print()函数输出上面1--4的运算结果，代码如下：
print('12&8 = ' + str（12&8）)             # 位与计算整数的结果
print('4|8 = ' + str(4|8))                # 位或计算整数的结果
print('31^22 = ' + str(31^22))            # 位异或计算整数的结果
print('~123 = ' + str(~123))              # 位取反计算整数的结果

5、左移位运算符<<是将一个二进制操作数向左移动指定的位数，左边（高位端）溢出的位被丢弃，右边（低位端）的空位用0补充。左移位运算相当于乘以
2的n次幂。
例如，Int类型数据48对应的二进制数为00110000,将其左移1位，根据左移位运算符的运算规则可以得出（00110000<<1）=01100000,所以转换为十进
制数就是96（48X2）；将其左移2位，根据左移位运算符的运算规则可以得出（00110000<<2）=11000000,所以转换为十进制数就是192（48X2²）其执行
                    十进制：48      0011 0000
                    十进制：96      0110 0000    48左移1位得出96，左边第一个0被丢弃，右边被一个0
                    十进制：192     1100 0000    48左多2位得192，左边两个0被丢弃，右边被两个0

6、右移位运算符>>是将一个二进制操作数向右移到指定的位数，右边（低位端）溢出的位被丢弃，而在填充左边（高位端）的空位时，如果最高位是0（正
数），左侧空位填入0；如果最高位是1（负数），左侧空位填入1.右移位运算相当于除以2的n次幂。
       十进制：48    0011 0000  右移1位，右边的0丢弃                    十进制：-80   1011 0000     右移2位，右边两个0丢弃
       十进制：24    0001 1000  右移后补0，0补在左边高位                 十进制：-20   1110 1100     右移后补1，左边补两个1

妙用：由于移位运算的速度很快，在程序中遇到表达式乘以或除以2的n次幂的情况时，一般采用移位运算来代替。




